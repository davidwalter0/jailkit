#!/usr/bin/python

import os
import getopt
import sys
import pwd
import string

users = {}

def getpwuid_cached(uid):
    if uid in users:
        return users[uid]
    else:
        user = pwd.getpwuid(uid)
        users[uid] = user
        return user

class ListResult:
    pid = None
    jail = None
    exe = None
    uid = None
    username = None
    cmdline = None
    
    
    def __init__(self, pid):
        self.pid = pid
        sb = os.stat('/proc/'+pid)
        self.uid = sb.st_uid
        pwdret = getpwuid_cached(sb.st_uid)
        self.username = pwdret[0]
        self.jail = os.readlink('/proc/'+pid+'/root')
        self.exe = os.readlink('/proc/'+pid+'/exe')
        fd = open('/proc/'+pid+'/cmdline')
        buf = fd.read(4096)
        self.cmdline = string.join(buf.split('\0')[1:],' ')
        fd.close()
    
    def __cmp__(self, other):
        ret = cmp(self.jail, other.jail)
        if(ret ==0):
            ret = cmp(self.uid, other.uid)
            if(ret ==0):
                ret = cmp(self.pid, other.pid)
        return ret     

    def optistr(self,usernamelen,jaillen,cmdlen):
        formatstring = '%%-06s %%-0%ds %%-0%ds %%-0%ds' % (usernamelen,jaillen,cmdlen)
        return formatstring % (self.pid, self.username[:usernamelen], self.jail[:jaillen], (self.exe+' '+self.cmdline)[:cmdlen])

    def __str__(self):
        return '%-06s %-05s %-011s %-019s %-019s' % (self.pid, self.username, self.jail, self.exe,self.cmdline)

def printResults(results,wide):
    if (len(results)==0):
        print 'No jailed processes found'
        return
    results.sort()
    usernamelen=4 # User
    jaillen=4 # Jail
    cmdlen=7 #Command
    for result in results:
        usernamelen = max(usernamelen,len(result.username))
        jaillen = max(jaillen,len(result.jail))
        cmdlen = max(cmdlen,len(result.cmdline+' '+result.exe))

    if (not wide):
        cmdlen = min(cmdlen,80-5-usernamelen-jaillen-4)
    
    titleformat =  '%%-06s %%-0%ds %%-0%ds %%-0%ds' % (usernamelen,jaillen,min(cmdlen,80-5-usernamelen-jaillen-4))
    print titleformat % ('Pid', 'User','Jail','Command')
    for result in results:
        if (wide):
            mycmdlen = len(result.cmdline+' '+result.exe)
        else:
            mycmdlen = cmdlen
        print result.optistr(usernamelen,jaillen,mycmdlen)


def runList(verbose,jail):
    # open /proc/
    results = []
    dirlist = os.listdir('/proc')
    for entry in dirlist:
        if (entry.isdigit()):
            # we have a process, now read the link root
            try:
            	ret = os.readlink('/proc/'+entry+'/root')
            	if (ret != '/'):
                	results.append(ListResult(entry))
            except OSError:
            	pass
    return results

def printusage():
    print "jk_list, lists pocesses running in a chroot jail"
    print "-h --help        print this message"
    print "-j --jail=/path  list only processes in this jail"
    print "-w --wide   print wide listing"

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hwj:", ['wide', "help", "jail"])
    except getopt.GetoptError:
        printusage()
        sys.exit(1)
    verbose = 0
    jail = None
    wide = 0
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        if o in ("-j", "--jail"):
            jail = a
        if o in ("-v", "--verbose"):
            verbose = 1
        if o in ("-w", "--wide"):
            wide = 1
    results = runList(verbose,jail)
    printResults(results,wide)

if __name__ == "__main__":
    main()
