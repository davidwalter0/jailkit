#!/usr/bin/python
#
#Copyright (c) 2006 Olivier Sessink
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions 
#are met:
#  * Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above 
#    copyright notice, this list of conditions and the following 
#    disclaimer in the documentation and/or other materials provided 
#    with the distribution.
#  * The names of its contributors may not be used to endorse or 
#    promote products derived from this software without specific 
#    prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
#"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
#LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
#FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
#COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
#INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
#BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
#CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
#LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
#ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
#POSSIBILITY OF SUCH DAMAGE.
#

import ConfigParser
import sys
import os
import string
from stat import *
import getopt
import stat

INIPREFIX='/etc/jailkit'
LIBDIR='/usr/share/jailkit'
sys.path.append(LIBDIR)
import jk_lib

def comparecontent(fileA, fileB):
	try:
		fA=open(fileA, 'rb')
		fB=open(fileB, 'rb')
		cont = 1
		retval = 1
		while (cont==1 and retval==1):
			bufA = fA.read(4096)
			bufB = fB.read(4096)
			if (bufA != bufB):
				retval = 0
			if (len(bufA)==0):
				cont = 0
		fA.close()
		fB.close()
		return retval
	except IOError:
		return 0

def comparemetadata(fileA, fileB, onlyifAisnewer=1, sbA=None, sbB=None):
	if (sbA==None):
		sbA = os.lstat(fileA)
	if (sbB==None):
		sbB = os.lstat(fileB)
	if (sbA[stat.ST_MTIME] > sbB[stat.ST_MTIME]): 
		if (sbA[stat.ST_SIZE] != sbB[stat.ST_SIZE]):
			return 0
		if (stat.S_ISLNK(sbA[stat.ST_MODE]) != stat.S_ISLNK(sbB[stat.ST_MODE])):
			return 0
		if (stat.S_ISLNK(sbA[stat.ST_MODE])):
			if (os.readlink(fileA) != os.readlink(fileB)):
				return 0
	return 1

def need_update(original, injail, origstatbuf=None):
	try :
		if (comparemetadata(original, injail,sbA=origstatbuf)==1):
			if (comparecontent(original, injail)==1):
				return 0
		return 1
	except OSError:
		# files that do not have an original file obviously cannot be updated
		return 0

def find2update(jail, dir, skips, config, files2update=[]):
	for file in os.listdir(jail+dir):
#		print 'test if '+dir+file+' or '+jail+dir+file+' exists in ',skips
		if ((dir+file in skips) or (jail+dir+file in skips)):
			print 'skip '+jail+dir+file
		else:
			try:
				sbuf = os.lstat(dir+file)
				if (stat.S_ISDIR(sbuf[stat.ST_MODE])):
					files2update = find2update(jail, dir+file+'/', skips, config, files2update)
				elif (stat.S_ISREG(sbuf[stat.ST_MODE])):
					if (config['verbose']):
						print 'checking '+jail+dir+file+''
					ret = need_update(dir+file, jail+dir+file, origstatbuf=sbuf)
					if (ret == 1):
						files2update.append(dir+file)
			except OSError, (errno,strerror):
				print jail+dir+file+' exists, but cannot stat file '+dir+file+': '+strerror
	return files2update

def updatejail(jail, dirs, skips, config):
	allfiles = []
	jaillen = len(jail)
	for dir in dirs:
		files = []
		if (dir[:jaillen] == jail):
			dir = dir[jaillen:]
		if (dir[-1:] != '/'):
			dir += '/'
		dirnoslash = dir[:-1]
#		print 'test if '+dirnoslash+' or '+jail+dirnoslash+' exists in ',skips
		if ((dirnoslash in skips) or (jail+dirnoslash in skips)):
			print 'skip '+jail+dir
		else:
			if (config['verbose']):
				print 'scannign dir '+jail+dir+' for outdated files'
			try:
				files = find2update(jail, dir, skips, config, [])
			except OSError, (errno,strerror):
				if (config['verbose']):
					print 'error while scannign dir '+jail+dir+': '+strerror
			for file in files:
				if (config['dry-run']):
					allfiles.append(file)
				else:
					print 'removing outdated file '+jail+file
					try:
						os.unlink(jail+file)
						allfiles.append(file)
					except:
						print "ERROR: failed to remove outdated file "+jail+file
	if (config['dry-run']):
		for file in allfiles:
			print 'will update '+jail+file
	else:
		jk_lib.copy_binaries_and_libs(jail,allfiles, 0, config['verbose'])

def usage():
	print ''
	print "Usage: "+sys.argv[0]+" [OPTIONS] [DIRECTORIES]"
	print '-h|--help      : this message'
	print '-v|--verbose   : give verbose output'
	print '-j|--jail=     : the jail to update'
	print '-d|--dry-run   : show what will be done'
	print '-s|--skip=     : skip file, option can be used multiple times'
	print ''
	print 'if no directories are specified, jk_update will scan /bin /usr /lib and /opt'
	print ''

def main():
	try:
		opts, args = getopt.getopt(sys.argv[1:], 'hvdj:s:', ['help', 'verbose', 'dry-run', 'jail=', 'skip='])
	except getopt.GetoptError:
		usage()
		sys.exit(1)
	config = {}
	config['verbose'] = 0
	config['dry-run'] = 0
	skips = []
	jail = None
	for o, a in opts:
		if o in ("-h", "--help"):
			usage()
			sys.exit()
		elif o in ("-v", "--verbose"):
			config['verbose'] = 1
		elif o in ("-d", "--dry-run"):
			config['dry-run'] = 1
		elif o in ("-s", "--skip"):
		# the name in skips will never have a slash, whether it is a file or a dir
			if (os.path.isdir(a) and (a[-1:] == '/')):
				tmp = a[:-1]
			else:
				tmp = a
			skips.append(tmp)
		elif o in ("-j", "--jail"):
			jail = a
	if (jail == None):
		print ''
		print 'must at least specify a jail using -j or --jail'
		print ''
		sys.exit(1)
	if (jail[-1:]=='/'):
		jail = jail[:-1]
	if (len(args)>0):
		updatejail(jail, args, skips, config)
	else:
		updatejail(jail, ['/bin/', '/lib/', '/usr/', '/opt/'], skips, config)

if __name__ == "__main__":
    main()
