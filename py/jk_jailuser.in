#!/usr/bin/python
#

import os.path
import grp
import pwd
import sys
import getopt

LIBDIR='/usr/share/jailkit'
sys.path.append(LIBDIR)
import jk_lib

def addusertojail(jail, user, shell):
	if (jail[-1] == '/'):
		jail = jail[:-1]
	pw = pwd.getpwnam(user)
	try:
		if (sys.platform[4:7] == 'bsd'):
			file = jail+'/etc/master.passwd'
			fd = open(file, 'a')
			fd.write(user+':x:'+str(pw[2])+':'+str(pw[3])+'::0:0:'+pw[4]+':'+pw[5]+':'+shell+'\n')
			fd.close()
			postcommand = 'pwd_mkdb -d '+jail+'/etc -u '+user+' /etc/master.passwd'
		else:
		#if (sys.platform[:5] == 'linux'):
			file  = jail+'/etc/passwd'
			fd = open(file, 'a')
			fd.write(user+':x:'+str(pw[2])+':'+str(pw[3])+'::'+pw[4]+':'+pw[5]+':'+shell+'\n')
			fd.close()
			postcommand = None
	except IOError:
		print 'failed to write to '+file+''
		return 0
	if (postcommand != None):
		ret = os.system(postcommand)
		if (ret != 0):
			print 'failed to execute '+postcommand
			return 0
	# lookup the primary group and make sure it also exists in the jail
	gr = grp.getgrgid(pw[2])
	if (not jk_lib.test_group_exist(gr.gr_name, jail+'/etc/group')):
		file = jail+'/etc/group'
		try:
			fd = open(file, 'a')
			fd.write(gr[0]+':x:'+str(gr[2])+':\n')
			fd.close()
		except IOError:
			print 'failed to write to '+file+''
			return 0
	return 1

def moduser(user, home, shell='/usr/sbin/jk_chrootsh'):
	command = 'usermod -d '+home+' -s '+shell+' '+user
	if (os.system(command)!=0):
		print 'failed to execute '+command
		return 0

def jailuser(jail, user, config):
	pw = pwd.getpwnam(user)
	if (jail[-1:] != '/'):
		jail = jail + '/'
	# add the user in the jail
	if (not addusertojail(jail, user, config['shell'])):
		sys.exit(2)
	# change the shell and the homedir
	newhome = jail+'.'+pw[5]
	if (not moduser(user,newhome,config['shell'])):
		sys.exit(3)
	#move directory contents
	if (config['movehome'] == 1):
		os.rename(pw[5], newhome)
	

def getjail_and_user(args):
	if (len(args)==0):
		return None,None
	user=None
	jail=None
	if (len(args) > 2):
		jk_lib.clean_exit(3,'could not understand all arguments',usage)
	if (len(args) == 2):
		if (os.path.exists(args[1]) or user_exists(args[0])):
			return args[1],args[0]
		else:
			return args[0],args[1]
	else:
		if os.path.exists(args[0]):
			jail = args[0]
		else:
			user = args[0]
#	print 'returning',jail,user
	return jail,user

def user_exists(user):
	try:
		pw= pwd.getpwnam(user)
		return 1
	except:
		return 0
	return 0

def usage():
	print
	print 'Usage: '+sys.argv[0]+' [OPTIONS] jaildir username'
	print
	print ' -v | --verbose        : verbose output'
	print ' -n | --noninteractive : verbose output'
	print ' -s | --shell shell    : set shell inside jail (/usr/sbin/jk_lsh default)'
	print ' -m | --move        : move home if home outside jail'
	print ' -h | --help        : this message'
	print

def getjail(jail, config):
	while (1):
		if (jail != None and os.path.exists(jail)):
			return jail
		else:
			if (jail != None):
				if (not os.path.exists(jail)):
					print 'jail '+jail+' does not exist'
					jail = None
			if (jail == None):
				if (config['interactive'] == 1):
					jail = raw_input('enter jail directory: ')
				else:
					sys.exit(33)

def getuser(jail,user,config):
	while (1):
		if (user != None and user_exists(user) and not jk_lib.test_user_exist(user, jail+'/etc/passwd')):
			return user
		else:
			if (user != None):
				if (not user_exists(user)):
					print 'user '+user+' does not exist'
					user = None
				elif (jk_lib.test_user_exist(user, jail+'/etc/passwd')):
					print 'user '+user+' is already jailed in '+jail
					user = None
		if (user == None):
			if (config['interactive'] == 1):
				user = raw_input('enter username: ')
			else:
				sys.exit(33)

def getmovehome(jail,user,config):
	pw = pwd.getpwnam(user)
	if (pw.pw_dir[0:len(jail)] == jail):
		return 0
	print 'home directory '+pw.pw_dir+' is not within '+jail+', move the directory contents?'
	tmp = raw_input('[Y]/[n]')
	if (tmp == 'n' or tmp == 'N'):
		return 0
	return 1

def main():
	try:
		opts, args = getopt.getopt(sys.argv[1:],"va:nmh?",['help', 'verbose', 'shell', 'nomove', 'move'])
	except getopt.GetoptError:
		usage()
		sys.exit(1)
	config = {}
	config['verbose'] = 0
	config['interactive'] = 1
	config['movehome'] = -1 # -1 = interactive
	config['shell'] = '/usr/sbin/jk_lsh' # default shell
	for o, a in opts:
		if o in ("-h", "-?", "--help"):
			usage()
			sys.exit()
		elif o in ("-v", "--verbose"):
			config['verbose'] = 1
		elif o in ('-s', '--shell'):
			config['shell'] = a
		elif o in ("-m", "--move"):
			config['movehome'] = 1
		elif o in ("-n", "--noninteractive"):
			config['interactive'] = 0
	if (config['interactive'] == 0 and config['movehome'] == -1):
		config['movehome'] = 0
	jail,user = getjail_and_user(args)
	try:
		jail = getjail(jail,config)
		user = getuser(jail,user,config)
		if (config['movehome'] == -1):
			config['movehome'] = getmovehome(jail, user)
	except KeyboardInterrupt:
		print
		print 'aborted.. '
		sys.exit(1)
	jailuser(jail, user, config)
 
if __name__ == "__main__":
	main()

